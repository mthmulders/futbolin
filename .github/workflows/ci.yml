name: CI build

on:
  push:
    branches: [ master ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up cache for ~./m2/repository
        uses: actions/cache@v2.1.5
        with:
          path: ~/.m2/repository
          key: futbolin-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            futbolin-

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 15
          distribution: 'adopt'
          check-latest: true

      - name: Test
        run: |
          mvn verify -B -V -Dsha1=$(git rev-parse HEAD | cut -c1-8)
        if: ${{ github.ref != 'refs/heads/main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          BUILD_NUM: ${{ github.run_id }}

      - name: Authenticate with container registry
        run: echo $DOCKER_PASSWORD | docker login eu-frankfurt-1.ocir.io -u $DOCKER_LOGIN --password-stdin
        env:
          DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        if: ${{ github.ref == 'refs/heads/master' }}

      - name: Package
        run: mvn deploy -Dbuild.number=${BUILD_NUM} -P docker
        if: ${{ github.ref == 'refs/heads/master' }}
        env:
          BUILD_NUM: ${{ github.run_id }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref == 'refs/heads/master' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install oci-cli
        run: |
          curl -o install.sh https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "PATH=/home/runner/bin/:$PATH" >> $GITHUB_ENV

      - name: Configure oci-cli
        run: |
          mkdir ~/.oci
          # Key is base64-encoded, see hint at https://stackoverflow.com/a/65351316/1523342
          echo ${OCI_API_KEY} | base64 -d > ~/.oci/api_key.pem
          cat << EOF > ~/.oci/config
          [DEFAULT]
          user=${OCI_USER}
          fingerprint=${OCI_FINGERPRINT}
          key_file=~/.oci/api_key.pem
          tenancy=${OCI_TENANCY}
          region=${OCI_REGION}
          EOF

          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/api_key.pem
        env:
          OCI_USER: "${{ secrets.OCI_USER }}"
          OCI_FINGERPRINT: "${{ secrets.OCI_FINGERPRINT }}"
          OCI_TENANCY: "${{ secrets.OCI_TENANCY }}"
          OCI_REGION: "${{ secrets.OCI_REGION }}"
          OCI_API_KEY: "${{ secrets.OCI_API_KEY }}"

      - name: Configure kubectl
        run: |
          oci ce cluster create-kubeconfig \
            --cluster-id ocid1.cluster.oc1.eu-frankfurt-1.aaaaaaaazhb2xq4w7czat2zimqcclitjhsl2n4jb55kx2a2jecug27loil2a \
            --file $HOME/.kube/config \
            --region eu-frankfurt-1 \
            --token-version 2.0.0
          chmod 600 /home/runner/.kube/config

      - name: Setup kubectl and helmfile
        uses: mamezou-tech/setup-helmfile@v0.8.0
        with:
          helmfile-version: "v0.139.4"
          install-kubectl: "yes"
          kubectl-version: "1.19.6"

      - name: Configure OCIR credentials
        run: |
          kubectl delete secret ocir-credentials || true
          kubectl create secret docker-registry ocir-credentials \
            --docker-server=eu-frankfurt-1.ocir.io \
            --docker-username=${OCIR_DOCKER_LOGIN} \
            --docker-password=${OCIR_DOCKER_PASSWORD}
        env:
          OCIR_DOCKER_LOGIN: ${{ secrets.OCIR_DOCKER_LOGIN }}
          OCIR_DOCKER_PASSWORD: ${{ secrets.OCIR_DOCKER_PASSWORD }}

      - name: Configure Docker Hub credentials
        run: |
          kubectl delete secret dockerhub-credentials || true
          kubectl create secret docker-registry dockerhub-credentials \
            --docker-username=${DOCKER_HUB_LOGIN} \
            --docker-email=${DOCKER_HUB_EMAIL} \
            --docker-password=${DOCKER_HUB_PASSWORD}
        env:
          DOCKER_HUB_EMAIL: ${{ secrets.DOCKER_HUB_EMAIL }}
          DOCKER_HUB_LOGIN: ${{ secrets.DOCKER_HUB_LOGIN }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Install infrastructure components
        run: |
          # grep exits with <> 0 if it fails to find the pattern. In that case, deployment/helmfile.yml wasn't touched
          # in the last commit, so we don't need to run helmfile either.
          (git diff-tree --no-commit-id --name-only -r ${COMMIT_SHA} | grep deployment/helmfile.yml) || exit 0

          export RABBITMQ_PASSWORD=$(kubectl get secret --namespace "rabbitmq" rabbitmq -o jsonpath="{.data.rabbitmq-password}" | base64 --decode)
          export RABBITMQ_ERLANG_COOKIE=$(kubectl get secret --namespace "rabbitmq" rabbitmq -o jsonpath="{.data.rabbitmq-erlang-cookie}" | base64 --decode)

          helmfile -f deployment/helmfile.yml apply --set auth.password=$RABBITMQ_PASSWORD --set auth.erlangCookie=$RABBITMQ_ERLANG_COOKIE
        env:
          COMMIT_SHA: ${{ github.sha }}

      - name: Deploy application components
        run: |
          declare -a files=(
            deployment/webapp.yml
          )

          for f in ${files[@]}
          do
              cat $f | sed -e "s/:latest/:${BUILD_NUM}/g" | kubectl apply -f -
          done
        env:
          BUILD_NUM: ${{ github.run_id }}

      # Set up according to https://cert-manager.io/docs/configuration/acme/
      - name: Configure Let's Encrypt
        run: |
          sed -e "s/LETS_ENCRYPT_EMAIL/${LETS_ENCRYPT_EMAIL}/g" deployment/letsencrypt-prod.yml | kubectl apply -f -
          kubectl apply -f deployment/ingress.yml
        env:
          LETS_ENCRYPT_EMAIL: "${{ secrets.LETS_ENCRYPT_EMAIL }}"
